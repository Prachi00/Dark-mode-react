{"version":3,"sources":["index.js"],"names":["App","React","useState","isReturningUser","localStorage","savedMode","JSON","parse","getItem","userPrefersDark","window","matchMedia","matches","getPrefColorScheme","getInitialMode","darkMode","setDarkMode","useEffect","setItem","stringify","className","style","color","checked","onChange","prevMode","id","type","htmlFor","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yOAKA,SAASA,IAAO,IAAD,EACmBC,IAAMC,SAKtC,WACE,IAAMC,EAAkB,SAAUC,aAC5BC,EAAYC,KAAKC,MAAMH,aAAaI,QAAQ,SAC5CC,EAWR,WACE,IAAKC,OAAOC,WAAY,OAExB,OAAOD,OAAOC,WAAW,gCAAgCC,QAdjCC,GAExB,OAAIV,EACKE,IACEI,EAZkCK,IADlC,mBACNC,EADM,KACIC,EADJ,KA0Bb,OAxBAf,IAAMgB,WAAU,WACdb,aAAac,QAAQ,OAAQZ,KAAKa,UAAUJ,MAC3C,CAACA,IAuBF,yBAAKK,UAAWL,EAAW,YAAc,cACvC,6BACE,yBAAKK,UAAU,oBACb,0BAAMC,MAAO,CAAEC,MAAOP,EAAW,OAAS,WAA1C,gBACA,0BAAMK,UAAU,UACd,2BACEG,QAASR,EACTS,SAAU,kBAAMR,GAAY,SAAAS,GAAQ,OAAKA,MACzCC,GAAG,WACHN,UAAU,WACVO,KAAK,aAEP,2BAAOC,QAAQ,cAEjB,0BAAMP,MAAO,CAAEC,MAAOP,EAAW,YAAc,SAA/C,YAGJ,8BACE,4BAAKA,EAAW,YAAc,cAC9B,6EAMR,IAAMc,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAACjC,EAAD,MAAS6B,K","file":"static/js/main.3cfe2f03.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = React.useState(getInitialMode());\n  React.useEffect(() => {\n    localStorage.setItem(\"dark\", JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  function getInitialMode() {\n    const isReturningUser = \"dark\" in localStorage;\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\n    const userPrefersDark = getPrefColorScheme();\n\n    if (isReturningUser) {\n      return savedMode;\n    } else if (userPrefersDark) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function getPrefColorScheme() {\n    if (!window.matchMedia) return;\n\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  }\n\n  return (\n    <div className={darkMode ? \"dark-mode\" : \"light-mode\"}>\n      <nav>\n        <div className=\"toggle-container\">\n          <span style={{ color: darkMode ? \"grey\" : \"yellow\" }}>☀︎</span>\n          <span className=\"toggle\">\n            <input\n              checked={darkMode}\n              onChange={() => setDarkMode(prevMode => !prevMode)}\n              id=\"checkbox\"\n              className=\"checkbox\"\n              type=\"checkbox\"\n            />\n            <label htmlFor=\"checkbox\" />\n          </span>\n          <span style={{ color: darkMode ? \"slateblue\" : \"grey\" }}>☾</span>\n        </div>\n      </nav>\n      <main>\n        <h1>{darkMode ? \"Dark Mode\" : \"Light Mode\"}</h1>\n        <h2>Toggle the switch to see some magic happen!</h2>\n      </main>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}